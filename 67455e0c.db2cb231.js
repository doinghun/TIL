(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{132:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),u=r,f=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return t?a.a.createElement(f,l(l({ref:n},s),{},{components:t})):a.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var r=t(3),a=t(7),o=(t(0),t(132)),i=["components"],l={slug:"js-let-vs-var",title:"let vs var in JavaScript"},c={unversionedId:"frontend/2-javascript/js-let-vs-var",id:"frontend/2-javascript/js-let-vs-var",isDocsHomePage:!1,title:"let vs var in JavaScript",description:'ES6 introduced let as a new way to declare "local" variable. But what about var? When should one use let or var?',source:"@site/docs/frontend/2-javascript/js-let-vs-var.md",slug:"/frontend/2-javascript/js-let-vs-var",permalink:"/TIL/docs/frontend/2-javascript/js-let-vs-var",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/frontend/2-javascript/js-let-vs-var.md",version:"current",lastUpdatedAt:1632925168,sidebar:"frontend",previous:{title:"for...of vs for...in Loops",permalink:"/TIL/docs/frontend/2-javascript/js-for-loops"},next:{title:"Making CLI app with Inquirer.js",permalink:"/TIL/docs/frontend/2-javascript/js-making-cli-app-with-inquirerJS"}},s=[{value:"Scoping Rules",id:"scoping-rules",children:[]},{value:"Hoisting",id:"hoisting",children:[]},{value:"Creating global object property",id:"creating-global-object-property",children:[]},{value:"Redeclaration",id:"redeclaration",children:[]}],p={rightToc:s};function b(e){var n=e.components,t=Object(a.a)(e,i);return Object(o.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"ES6 introduced ",Object(o.b)("inlineCode",{parentName:"p"},"let"),' as a new way to declare "local" variable. But what about ',Object(o.b)("inlineCode",{parentName:"p"},"var"),"? When should one use ",Object(o.b)("inlineCode",{parentName:"p"},"let")," or ",Object(o.b)("inlineCode",{parentName:"p"},"var"),"?"),Object(o.b)("h2",{id:"scoping-rules"},"Scoping Rules"),Object(o.b)("p",null,"Main difference is scoping rules. Variables declared by ",Object(o.b)("inlineCode",{parentName:"p"},"var")," are scoped to the immediate function body (function scope) while ",Object(o.b)("inlineCode",{parentName:"p"},"let")," variables are scoped to the immediate enclosing block denoted by ",Object(o.b)("inlineCode",{parentName:"p"},"{ }")," (block scope)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'function run() {\n  var foo = "Foo";\n  let bar = "Bar";\n\n  console.log(foo, bar);\n\n  {\n    let baz = "Bazz";\n    console.log(baz);\n  }\n  console.log(baz); //ReferenceError\n}\n\nrun();\n')),Object(o.b)("p",null,"The reason why ",Object(o.b)("inlineCode",{parentName:"p"},"let")," keyword was introduced to the language was function scope is confusing and was one of the main sources of bugs in JavaScript."),Object(o.b)("h2",{id:"hoisting"},"Hoisting"),Object(o.b)("p",null,"While variables declared with ",Object(o.b)("inlineCode",{parentName:"p"},"var"),' keyword are "hoisted" to the top of the block which means they are accesible in their enclosing scope ven before they are declared:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'function run() {\n  console.log(foo); // undefined\n  var foo = "Foo";\n  console.log(foo); // Foo\n}\n\nrun();\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"let")," variables are not initialized until their definition is evaluated. Accessing them before the initialisation results in a ",Object(o.b)("inlineCode",{parentName:"p"},"ReferenceError"),'. Variable said to be in "temporal dead zone" from the start of the block until the initialisation is processed.'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'function checkHoisting {\n    console.log(foo); // ReferenceError\n    let foo = "Foo";\n    console.log(foo); // foo\n}\n\ncheckHoisting();\n')),Object(o.b)("h2",{id:"creating-global-object-property"},"Creating global object property"),Object(o.b)("p",null,"At the top level, ",Object(o.b)("inlineCode",{parentName:"p"},"let"),", unlike ",Object(o.b)("inlineCode",{parentName:"p"},"var")," does not create a property on the global object:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'var foo = "Foo"; // globally scoped\nlet bar = "Bar"; // globally scoped\n\nconsole.log(window.foo); // Foo\nconsole.log(window.bar); // undefined\n')),Object(o.b)("h2",{id:"redeclaration"},"Redeclaration"),Object(o.b)("p",null,"In strict mode, ",Object(o.b)("inlineCode",{parentName:"p"},"var")," will let you re-declare the same variable in the same scope while ",Object(o.b)("inlineCode",{parentName:"p"},"let")," raises a SyntaxError."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'"use strict";\n\nvar foo = "foo1";\nvar foo = "foo2"; // \'foo\' is replaced.\n\nlet bar = "bar1";\nlet bar = "bar2"; // SyntaxError: Identifier \'bar\' has already been declared\n')),Object(o.b)("hr",null),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Reference:")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var"},"https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var"))))}b.isMDXComponent=!0}}]);