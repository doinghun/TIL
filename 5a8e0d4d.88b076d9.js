(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{132:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),u=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||b[d]||i;return n?a.a.createElement(m,c(c({ref:t},o),{},{components:n})):a.a.createElement(m,c({ref:t},o))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var o=2;o<i;o++)l[o]=n[o];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(132)),l=["components"],c={slug:"ds-singly-linked-list",title:"Singly Linked List"},s={unversionedId:"cs/1-data-structure/ds-singly-linked-list",id:"cs/1-data-structure/ds-singly-linked-list",isDocsHomePage:!1,title:"Singly Linked List",description:"Singly Linked Lists",source:"@site/docs/cs/1-data-structure/ds-singly-linked-list.md",slug:"/cs/1-data-structure/ds-singly-linked-list",permalink:"/TIL/docs/cs/1-data-structure/ds-singly-linked-list",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/cs/1-data-structure/ds-singly-linked-list.md",version:"current",lastUpdatedAt:1632925168,sidebar:"cs",previous:{title:"Binary Tree Traversal",permalink:"/TIL/docs/cs/1-data-structure/ds-binary-tree-traversal"}},o=[],u={rightToc:o};function p(e){var t=e.components,n=Object(a.a)(e,l);return Object(i.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Singly Linked Lists"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Analogy: Singly Linked List is like a skyscrapper with no elevators but only stairs upwards. Array has elevators that can take you to wanted floor"),Object(i.b)("li",{parentName:"ul"},"List",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"no indexes"),Object(i.b)("li",{parentName:"ul"},"connected via nodes with a next pointer"),Object(i.b)("li",{parentName:"ul"},"random access is not allowed"))),Object(i.b)("li",{parentName:"ul"},"Array",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"index in order"),Object(i.b)("li",{parentName:"ul"},"insertion & deletion can be expensive (reason why use list)"),Object(i.b)("li",{parentName:"ul"},"can quickly be accessed at a specific index"))),Object(i.b)("li",{parentName:"ul"},"Methods",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"push"),Object(i.b)("li",{parentName:"ul"},"pop"),Object(i.b)("li",{parentName:"ul"},"shift"),Object(i.b)("li",{parentName:"ul"},"unshift"),Object(i.b)("li",{parentName:"ul"},"get"),Object(i.b)("li",{parentName:"ul"},"set"),Object(i.b)("li",{parentName:"ul"},"insert"),Object(i.b)("li",{parentName:"ul"},"remove"),Object(i.b)("li",{parentName:"ul"},"reverse")))))}p.isMDXComponent=!0}}]);