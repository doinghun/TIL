(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{132:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,m=u["".concat(c,".").concat(d)]||u[d]||b[d]||a;return n?r.a.createElement(m,s(s({ref:t},p),{},{components:n})):r.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var p=2;p<a;p++)c[p]=n[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return u}));var o=n(3),r=n(7),a=(n(0),n(132)),c=["components"],s={slug:"js-oop-1",title:"OOP in JS [Part 1]"},i={unversionedId:"frontend/2-javascript/js-oop-1",id:"frontend/2-javascript/js-oop-1",isDocsHomePage:!1,title:"OOP in JS [Part 1]",description:"What are Objects",source:"@site/docs/frontend/2-javascript/js-oop-1.md",slug:"/frontend/2-javascript/js-oop-1",permalink:"/TIL/docs/frontend/2-javascript/js-oop-1",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/frontend/2-javascript/js-oop-1.md",version:"current",lastUpdatedAt:1632925168,sidebar:"frontend",previous:{title:"JS Memory Model",permalink:"/TIL/docs/frontend/2-javascript/js-memory-model"},next:{title:"OOP in JS [Part 2]",permalink:"/TIL/docs/frontend/2-javascript/js-oop-2"}},p=[{value:"What are Objects",id:"what-are-objects",children:[]},{value:"Dot Notation",id:"dot-notation",children:[]},{value:"Object Methods",id:"object-methods",children:[]},{value:"Constructor Functions",id:"constructor-functions",children:[]}],l={rightToc:p};function u(e){var t=e.components,n=Object(r.a)(e,c);return Object(a.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"what-are-objects"},"What are Objects"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Objects in JavaScript are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. (Eg. Object - Cars, Property - Wheel)"),Object(a.b)("li",{parentName:"ul"},"These qualities, or properties, define what makes up an object.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'let dog = {\n  name: "Koong",\n  numLegs: 4,\n};\n')),Object(a.b)("h3",{id:"dot-notation"},"Dot Notation"),Object(a.b)("p",null,"Dot notation is used on the object name, ",Object(a.b)("inlineCode",{parentName:"p"},"dog"),", followed by the name of the property, ",Object(a.b)("inlineCode",{parentName:"p"},"name"),', to access the value of "Koong".'),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'console.log(dog.name); // "Koong"\n')),Object(a.b)("h3",{id:"object-methods"},"Object Methods"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Objects can have a special type of property, called a method."),Object(a.b)("li",{parentName:"ul"},"Methods are properties that are ",Object(a.b)("strong",{parentName:"li"},"functions"),". This adds different behavior to an object.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'let dog = {\n  name: "Koong",\n  numLegs: 4,\n  sayLegs: function () {\n    return "This dog has " + this.numLegs + " legs.";\n  },\n};\n\ndog.sayLegs(); // This dog has 4 legs.\n')),Object(a.b)("h3",{id:"constructor-functions"},"Constructor Functions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Constructors are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a ",Object(a.b)("strong",{parentName:"li"},"blueprint")," for the creation of new objects."),Object(a.b)("li",{parentName:"ul"},"Constructors define properties and behaviors instead of returning a value as other functions might.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'function Dog() {\n  this.name = "Koong";\n  this.color = "White";\n  this.numLegs = 4;\n}\n')),Object(a.b)("h4",{id:"use-constructor-to-create-objects"},"Use constructor to create objects"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"new")," operator create a new instance of Dog called maltese"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'function Dog() {\n  this.name = "Koong";\n  this.color = "white";\n  this.numLegs = 4;\n}\n\nlet maltese = new Dog();\n')),Object(a.b)("h4",{id:"extend-constructors-to-receive-arguments"},"Extend Constructors to Receive Arguments"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'function Dog(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 4;\n}\nlet maltese = new Dog("Koong", "White");\n')),Object(a.b)("h4",{id:"instance-of"},Object(a.b)("inlineCode",{parentName:"h4"},"instance of")),Object(a.b)("p",null,"Anytime a constructor function creates a new object, that object is said to be an instance of its constructor."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\nlet myHouse = new House(3);\nmyHouse instanceof House; // true\n")),Object(a.b)("h4",{id:"ownprops"},"ownProps"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"let ownProps = [];\n// Add your code below this line\nfor (let property in myHouse) {\n  if (myHouse.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\nconsole.log(ownProps); // [ 'numBedrooms' ]\n")),Object(a.b)("h4",{id:"use-prototype-properties-to-reduce-duplicate-code"},"Use Prototype Properties to Reduce Duplicate Code"),Object(a.b)("p",null,"To avoid writing duplicated variable (eg. ",Object(a.b)("inlineCode",{parentName:"p"},"this.numLegs = 4"),"), a better way is to use Dog\u2019s prototype. Properties in the prototype are shared among ALL instances of Dog."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'function Dog(name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\n\nlet maltese = new Dog("Koong");\n')),Object(a.b)("h4",{id:"protype-props"},"protype Props"),Object(a.b)("p",null,"There are 2 kinds of properties"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"own properties: Defined directly on the object instance itself"),Object(a.b)("li",{parentName:"ul"},"prototype properties: Defined on the prototype.")),Object(a.b)("p",null,"How to check?"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"let ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in maltese) {\n  if (maltese.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps); // [ 'name' ]\nconsole.log(prototypeProps); // [ 'numLegs' ]\n")),Object(a.b)("h4",{id:"constructor-property"},"Constructor Property"),Object(a.b)("p",null,"The constructor property is a reference to the constructor function that created the instance."),Object(a.b)("p",null,"The advantage of the constructor property is that it's possible to check for this property to find out what kind of object it is."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},'let maltese = new Dog("Koong");\nconsole.log(maltese.constructor === Dog); //prints true\n')))}u.isMDXComponent=!0}}]);