(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{132:function(n,e,a){"use strict";a.d(e,"a",(function(){return d})),a.d(e,"b",(function(){return m}));var r=a(0),t=a.n(r);function i(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function o(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,r)}return a}function l(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){i(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function c(n,e){if(null==n)return{};var a,r,t=function(n,e){if(null==n)return{};var a,r,t={},i=Object.keys(n);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||(t[a]=n[a]);return t}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(t[a]=n[a])}return t}var p=t.a.createContext({}),s=function(n){var e=t.a.useContext(p),a=e;return n&&(a="function"==typeof n?n(e):l(l({},e),n)),a},d=function(n){var e=s(n.components);return t.a.createElement(p.Provider,{value:e},n.children)},b={inlineCode:"code",wrapper:function(n){var e=n.children;return t.a.createElement(t.a.Fragment,{},e)}},u=t.a.forwardRef((function(n,e){var a=n.components,r=n.mdxType,i=n.originalType,o=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),d=s(a),u=r,m=d["".concat(o,".").concat(u)]||d[u]||b[u]||i;return a?t.a.createElement(m,l(l({ref:e},p),{},{components:a})):t.a.createElement(m,l({ref:e},p))}));function m(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l.mdxType="string"==typeof n?n:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.a.createElement.apply(null,o)}return t.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},84:function(n,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return c})),a.d(e,"rightToc",(function(){return p})),a.d(e,"default",(function(){return d}));var r=a(3),t=a(7),i=(a(0),a(132)),o=["components"],l={slug:"python-numpy",title:"Numpy in Python"},c={unversionedId:"data/1-python/python-numpy",id:"data/1-python/python-numpy",isDocsHomePage:!1,title:"Numpy in Python",description:"Numpy is numberical lib for Python",source:"@site/docs/data/1-python/python-numpy.md",slug:"/data/1-python/python-numpy",permalink:"/TIL/docs/data/1-python/python-numpy",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/data/1-python/python-numpy.md",version:"current",lastUpdatedAt:1632925168,sidebar:"data",previous:{title:"Intro to Matplotlib",permalink:"/TIL/docs/data/1-python/python-matplotlib"},next:{title:"Intro to Python Pandas",permalink:"/TIL/docs/data/1-python/python-pandas-intro"}},p=[{value:"Creating NumPy Arrays from a Python List",id:"creating-numpy-arrays-from-a-python-list",children:[]},{value:"Built-in Methods",id:"built-in-methods",children:[{value:"arange",id:"arange",children:[]},{value:"zeros and ones",id:"zeros-and-ones",children:[]},{value:"linspace",id:"linspace",children:[]}]},{value:"eye",id:"eye",children:[]},{value:"Random",id:"random",children:[{value:"rand",id:"rand",children:[]},{value:"randn",id:"randn",children:[]},{value:"randint",id:"randint",children:[]}]},{value:"Array Attributes and Methods",id:"array-attributes-and-methods",children:[]},{value:"Reshape",id:"reshape",children:[{value:"max,min,argmax,argmin",id:"maxminargmaxargmin",children:[]}]},{value:"Shape",id:"shape",children:[{value:"dtype",id:"dtype",children:[]}]},{value:"Arithmetic",id:"arithmetic",children:[]},{value:"Universal Array Functions",id:"universal-array-functions",children:[]},{value:"Bracket Indexing and Selection",id:"bracket-indexing-and-selection",children:[]},{value:"Broadcasting",id:"broadcasting",children:[]},{value:"Indexing a 2D array (matrices)",id:"indexing-a-2d-array-matrices",children:[]},{value:"Conditional Selection",id:"conditional-selection",children:[]}],s={rightToc:p};function d(n){var e=n.components,a=Object(t.a)(n,o);return Object(i.b)("wrapper",Object(r.a)({},s,a,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Numpy is numberical lib for Python"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It allows for fast data generation & handling"),Object(i.b)("li",{parentName:"ul"},"It utilizes arrays that can efficiently store data (faster than built in python list")),Object(i.b)("h1",{id:"numpy-arrays"},"Numpy Arrays"),Object(i.b)("h2",{id:"creating-numpy-arrays-from-a-python-list"},"Creating NumPy Arrays from a Python List"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"my_list = [1,2,3]\ntype(my_list) #list\n\nx = np.array(my_list)\ntype(x) #numpy.ndarray\n\nmy_matrix = [[1,2,3],[4,5,6],[7,8,9]]\ntype(my_matrix) #list\n\ny = np.array(my_matrix)\ntype(y) #numpy.ndarray\n")),Object(i.b)("h2",{id:"built-in-methods"},"Built-in Methods"),Object(i.b)("h3",{id:"arange"},"arange"),Object(i.b)("p",null,"Return evenly spaced values within a given interval."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.arange(0,10) #(start, end(excl))\n#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nnp.arange(0,11,2) #(start, end(excl), interval)\n#array([ 0,  2,  4,  6,  8, 10])\n")),Object(i.b)("h3",{id:"zeros-and-ones"},"zeros and ones"),Object(i.b)("p",null,"Generate arrays of zeros or ones"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.zeros(3)\n# array([0., 0., 0.])\n\nnp.zeros((5,5))\n# array([[ 0.,  0.,  0.,  0.,  0.],\n#       [ 0.,  0.,  0.,  0.,  0.],\n#       [ 0.,  0.,  0.,  0.,  0.],\n#       [ 0.,  0.,  0.,  0.,  0.],\n#       [ 0.,  0.,  0.,  0.,  0.]])\n\nnp.ones(3)\n# array([ 1.,  1.,  1.])\n\nnp.ones((3,3))\n#array([[ 1.,  1.,  1.],\n#       [ 1.,  1.,  1.],\n#       [ 1.,  1.,  1.]])\n")),Object(i.b)("h3",{id:"linspace"},"linspace"),Object(i.b)("p",null,"Return ",Object(i.b)("em",{parentName:"p"},"evenly")," spaced numbers over a specified interval."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.linspace(0,10,3) #(start, end(incl), number of elem)\n# array([  0.,   5.,  10.])\n")),Object(i.b)("h2",{id:"eye"},"eye"),Object(i.b)("p",null,"Creates an identity matrix"),Object(i.b)("p",null,"np.eye(4)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"# array([[ 1.,  0.,  0.,  0.],\n#        [ 0.,  1.,  0.,  0.],\n#        [ 0.,  0.,  1.,  0.],\n#        [ 0.,  0.,  0.,  1.]])\n")),Object(i.b)("h2",{id:"random"},"Random"),Object(i.b)("p",null,"Numpy also has lots of ways to create random number arrays:"),Object(i.b)("h3",{id:"rand"},"rand"),Object(i.b)("p",null,"Create an array of the given shape and populate it with\nrandom samples from a ",Object(i.b)("strong",{parentName:"p"},"uniform")," distribution\nover ",Object(i.b)("inlineCode",{parentName:"p"},"[0, 1)"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.random.rand(2)\n# array([0.11117311, 0.10694908])\nnp.random.rand(5,5)\n# array([[0.32919478, 0.89520412, 0.03326804, 0.47479204],\n#       [0.99272802, 0.71816066, 0.3453127 , 0.17001773],\n#       [0.07819272, 0.76300463, 0.8945015 , 0.487872  ],\n#       [0.95668361, 0.80910131, 0.48793077, 0.72231638],\n#       [0.37697983, 0.94262294, 0.13009871, 0.77302476]])\n")),Object(i.b)("h3",{id:"randn"},"randn"),Object(i.b)("p",null,"Return a sample (or samples) from the ",Object(i.b)("strong",{parentName:"p"},'"standard normal"')," distribution."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.random.randn(2)\n# array([0.57916744, 0.01683836])\nnp.random.randn(5,4)\n# array([[-0.03813404,  0.00507951, -0.50010239,  0.14320891],\n#       [ 0.80241397,  0.99455157,  0.55929319,  1.57562611],\n#       [ 2.36626857,  0.7783677 , -1.92138192, -0.0893623 ],\n#       [ 0.07557485,  1.48150919, -0.17868916, -1.67600368],\n#       [ 1.37925383, -0.61186829, -0.87933735, -0.56165139]])\n")),Object(i.b)("h3",{id:"randint"},"randint"),Object(i.b)("p",null,"Return random integers from ",Object(i.b)("inlineCode",{parentName:"p"},"low")," (inclusive) to ",Object(i.b)("inlineCode",{parentName:"p"},"high")," (exclusive)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"np.random.randint(1,100) # (start(incl), end(excl))\nnp.random.randint(1,100,10) # (start(incl), end(excl), num of elem)\n")),Object(i.b)("h2",{id:"array-attributes-and-methods"},"Array Attributes and Methods"),Object(i.b)("p",null,"Let's discuss some useful attributes and methods or an array:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr = np.arange(25)\n# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\nranarr = np.random.randint(0,50,10)\n# array([38,  4, 42, 31, 46, 34, 23, 49, 33, 30])\n")),Object(i.b)("h2",{id:"reshape"},"Reshape"),Object(i.b)("p",null,"Returns an array containing the same data with a new shape."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr.reshape(5,5)\n# array([[ 0,  1,  2,  3,  4],\n#       [ 5,  6,  7,  8,  9],\n#       [10, 11, 12, 13, 14],\n#       [15, 16, 17, 18, 19],\n#       [20, 21, 22, 23, 24]])\n")),Object(i.b)("h3",{id:"maxminargmaxargmin"},"max,min,argmax,argmin"),Object(i.b)("p",null,"These are useful methods for finding max or min values.\nOr to find their index locations using argmin or argmax"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"ranarr\n# array([38,  4, 42, 31, 46, 34, 23, 49, 33, 30])\nranarr.max()\n# 49\nranarr.argmax()\n# 7\nranarr.min()\n# 4\nranarr.argmin()\n# 1\n")),Object(i.b)("h2",{id:"shape"},"Shape"),Object(i.b)("p",null,"Shape is an ",Object(i.b)("strong",{parentName:"p"},"attribute")," that arrays have (not a method):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr.shape\n# (25,)\narr.reshape(5,5)\n#array([[ 0,  1,  2,  3,  4],\n#       [ 5,  6,  7,  8,  9],\n#       [10, 11, 12, 13, 14],\n#       [15, 16, 17, 18, 19],\narr.reshape(5,5).shape\n# (5,5)\n")),Object(i.b)("h3",{id:"dtype"},"dtype"),Object(i.b)("p",null,"You can also grab the data type of the object in the array:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr.dtype\n# dtype('int64')\n")),Object(i.b)("h1",{id:"numpy-operations"},"Numpy Operations"),Object(i.b)("h2",{id:"arithmetic"},"Arithmetic"),Object(i.b)("p",null,"You can easily perform array with array arithmetic, or scalar with array arithmetic. Let's see some examples:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"import numpy as np\narr = np.arange(0,10)\n\narr + arr\n# array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n\narr * arr\n# array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])\n\narr - arr\n# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\narr/arr\n# array([nan,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])\n# Warning on division by zero, but not an error! Just replaced with nan\n\n# Also warning, but not an error instead infinity\n1/arr\n# array([ inf, 1. , 0.5       , 0.33333333, 0.25 , 0.2, 0.16666667, 0.14285714, 0.125, 0.11111111])\n\narr**3\n# array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])\n")),Object(i.b)("h2",{id:"universal-array-functions"},"Universal Array Functions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"#Taking Square Roots\nnp.sqrt(arr)\n\n#Calcualting exponential (e^)\nnp.exp(arr)\n\nnp.max(arr) #same as arr.max()\n\nnp.sin(arr)\n\nnp.log(arr)\n")),Object(i.b)("h1",{id:"numpy-indexing--selection"},"Numpy Indexing & Selection"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"import numpy as np\n\narr = np.arange(0,11)\n# array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n")),Object(i.b)("h2",{id:"bracket-indexing-and-selection"},"Bracket Indexing and Selection"),Object(i.b)("p",null,"The simplest way to pick one or some elements of an array looks very similar to python lists:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"##Get a value at an index\narr[8]\n# 8\n\n##Get values in a range\narr[1:5]\n# array([1, 2, 3, 4])\narr[0:5]\n# array([0, 1, 2, 3, 4])\n\n")),Object(i.b)("h2",{id:"broadcasting"},"Broadcasting"),Object(i.b)("p",null,"Numpy arrays differ from a normal Python list because of their ability to broadcast:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"## Setting a value with index range (Broadcasting)\n\narr[0:5]=100\n# array([100, 100, 100, 100, 100,   5,   6,   7,   8,   9,  10])\n\n## Reset array\narr = np.arange(0,11)\n\nslice_of_arr = arr[0:6]\n# array([0, 1, 2, 3, 4, 5])\n\n#Change Slice\nslice_of_arr[:]=99\n\n#Show Slice again\nslice_of_arr\n# array([99, 99, 99, 99, 99, 99])\n\n# [Now note the changes also occur in our original array]\n\narr\n# array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])\n\n\n# [Data is not copied, it's a view of the original array! This avoids memory problems]\n\n#To get a copy, need to be explicit\narr_copy = arr.copy()\n# array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])\n")),Object(i.b)("h2",{id:"indexing-a-2d-array-matrices"},"Indexing a 2D array (matrices)"),Object(i.b)("p",null,"The general format is\n",Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"arr_2d[row][col]"))," or ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"arr_2d[row,col]")),"."),Object(i.b)("p",null,"Recommended: Using the comma notation for clarity."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))\n# array([[ 5, 10, 15],\n#        [20, 25, 30],\n#        [35, 40, 45]])\n\narr_2d[1]\n# array([20, 25, 30])\n\n## Getting individual element value\narr_2d[1][0]\narr_2d[1,0]\n# 20\n\n\n## 2D array slicing\n\n# Shape (2,2) from top right corner\narr_2d[:2,1:]\n# array([[10, 15],\n#       [25, 30]])\n\n# Shape bottom row\narr_2d[2]\narr_2d[2,:]\n# array([35, 40, 45])\n")),Object(i.b)("h2",{id:"conditional-selection"},"Conditional Selection"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-py"},"arr = np.arange(1,11)\n# array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\nbool_arr = arr>4\n# array([False, False, False, False,  True,  True,  True,  True,  True, True])\n\narr[bool_arr]\n# array([ 5, 6, 7, 8, 9, 10])\n\narr[arr>2]\n# array([ 3, 4, 5, 6, 7, 8, 9, 10])\n")))}d.isMDXComponent=!0}}]);