(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{132:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),m=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(n),p=r,b=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return n?a.a.createElement(b,i(i({ref:t},l),{},{components:n})):a.a.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},174:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/js-memory-model-990a232114aa57886698666528ff77ec.png"},175:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/js-memory-model1-596f17291cb9d62f2956b153772c7437.jpeg"},176:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/js-memory-model2-67675a21a2a907d3033c9858524e9624.jpeg"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),o=(n(0),n(132)),s=["components"],i={slug:"js-memory-model",title:"JS Memory Model"},c={unversionedId:"frontend/2-javascript/js-memory-model",id:"frontend/2-javascript/js-memory-model",isDocsHomePage:!1,title:"JS Memory Model",description:"Behind the Scene (JS)",source:"@site/docs/frontend/2-javascript/js-memory-model.md",slug:"/frontend/2-javascript/js-memory-model",permalink:"/TIL/docs/frontend/2-javascript/js-memory-model",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/frontend/2-javascript/js-memory-model.md",version:"current",lastUpdatedAt:1632925168,sidebar:"frontend",previous:{title:"Map, Filter & Reduce in JS",permalink:"/TIL/docs/frontend/2-javascript/js-map-filter-reduce"},next:{title:"OOP in JS [Part 1]",permalink:"/TIL/docs/frontend/2-javascript/js-oop-1"}},l=[{value:"Behind the Scene (JS)",id:"behind-the-scene-js",children:[{value:"Variable declarations and assignments for JS primitives",id:"variable-declarations-and-assignments-for-js-primitives",children:[]},{value:"Variable declarations and assignments for JS non-primitives",id:"variable-declarations-and-assignments-for-js-non-primitives",children:[]},{value:"Let vs Const",id:"let-vs-const",children:[]}]}],m={rightToc:l};function d(e){var t=e.components,i=Object(a.a)(e,s);return Object(o.b)("wrapper",Object(r.a)({},m,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"behind-the-scene-js"},"Behind the Scene (JS)"),Object(o.b)("p",null,"Using JavaScript, declaring variables, initializing them, and assigning them new values later on is something we do on a daily basis. So what actually happens in memory when we declare & assign value?"),Object(o.b)("p",null,Object(o.b)("img",{alt:"js-memorymodel",src:n(174).default})),Object(o.b)("h3",{id:"variable-declarations-and-assignments-for-js-primitives"},"Variable declarations and assignments for JS primitives"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"let myNumber = 23;\nlet newVar = myNumber;\nmyNumber = myNumber + 1;\n")),Object(o.b)("p",null,Object(o.b)("img",{alt:"js-memorymodel1",src:n(175).default})),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The call stack is where primitives are stored (in addition to function calls). While the heap is where non-primitives are stored. The key difference is that the heap can store unordered data that can grow dynamically\u2014perfect for arrays and objects.")),Object(o.b)("h3",{id:"variable-declarations-and-assignments-for-js-non-primitives"},"Variable declarations and assignments for JS non-primitives"),Object(o.b)("p",null,"What actually happens in memory when we declare & assign value?"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"let myArray = [];\n")),Object(o.b)("p",null,Object(o.b)("img",{alt:"js-memorymodel2",src:n(176).default})),Object(o.b)("h3",{id:"let-vs-const"},"Let vs Const"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The correct way to interpret \u201cchange\u201d is a change in memory address. Let allows you to change memory addresses. Const does not allow you to change memory addresses.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"let sum = 0;\nsum = 1 + 2 + 3 + 4 + 5;\nlet numbers = []; // WRONG! Use const\nnumbers.push(1);\nnumbers.push(2);\nnumbers.push(3);\nnumbers.push(4);\nnumbers.push(5);\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Google, who has some of the best coders in the world, says in their JavaScript style guide, \u201cDeclare all local variables with either const or let. Use const by default, unless a variable needs to be reassigned. The var keyword must not be used\u201d")),Object(o.b)("hr",null),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Reference"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239"},"https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239"))))}d.isMDXComponent=!0}}]);