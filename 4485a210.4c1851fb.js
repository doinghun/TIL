(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{132:function(e,t,a){"use strict";a.d(t,"a",(function(){return i})),a.d(t,"b",(function(){return j}));var n=a(0),l=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=l.a.createContext({}),m=function(e){var t=l.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},i=function(e){var t=m(e.components);return l.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},O=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,r=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),i=m(a),O=n,j=i["".concat(r,".").concat(O)]||i[O]||u[O]||b;return a?l.a.createElement(j,c(c({ref:t},d),{},{components:a})):l.a.createElement(j,c({ref:t},d))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,r=new Array(b);r[0]=O;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var d=2;d<b;d++)r[d]=a[d];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"},86:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return i}));var n=a(3),l=a(7),b=(a(0),a(132)),r=["components"],c={slug:"python-pandas-methods",title:"Useful Methods in Pandas"},p={unversionedId:"data/1-python/python-pandas-methods",id:"data/1-python/python-pandas-methods",isDocsHomePage:!1,title:"Useful Methods in Pandas",description:"Handling Missing Data",source:"@site/docs/data/1-python/python-pandas-methods.md",slug:"/data/1-python/python-pandas-methods",permalink:"/TIL/docs/data/1-python/python-pandas-methods",editUrl:"https://github.com/doinghun/TIL/edit/master/website/docs/data/1-python/python-pandas-methods.md",version:"current",lastUpdatedAt:1632925168,sidebar:"data",previous:{title:"Intro to Python Pandas",permalink:"/TIL/docs/data/1-python/python-pandas-intro"}},d=[{value:"<code>dropna()</code>",id:"dropna",children:[]},{value:"<code>fillna()</code>",id:"fillna",children:[]},{value:"Concatenation",id:"concatenation",children:[]},{value:"Merging",id:"merging",children:[]},{value:"Joining",id:"joining",children:[]},{value:"Info on Unique Values",id:"info-on-unique-values",children:[]},{value:"Applying Functions",id:"applying-functions",children:[]},{value:"CSV",id:"csv",children:[{value:"CSV Input",id:"csv-input",children:[]}]},{value:"Excel",id:"excel",children:[{value:"Excel Input",id:"excel-input",children:[]},{value:"Excel Output",id:"excel-output",children:[]}]},{value:"HTML",id:"html",children:[{value:"HTML Input",id:"html-input",children:[]}]}],m={rightToc:d};function i(e){var t=e.components,a=Object(l.a)(e,r);return Object(b.b)("wrapper",Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"handling-missing-data"},"Handling Missing Data"),Object(b.b)("p",null,"Convenient methods to deal with Missing Data in pandas:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'A':[1,2,np.nan],\n                   'B':[5,np.nan,np.nan],\n                   'C':[1,2,3]})\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"1.0"),Object(b.b)("td",{parentName:"tr",align:null},"5.0"),Object(b.b)("td",{parentName:"tr",align:null},"1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"2.0"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"3")))),Object(b.b)("h2",{id:"dropna"},Object(b.b)("inlineCode",{parentName:"h2"},"dropna()")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.dropna()\n# Drop raws with any missing values (NaN / null)\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"1.0"),Object(b.b)("td",{parentName:"tr",align:null},"5.0"),Object(b.b)("td",{parentName:"tr",align:null},"1")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.dropna(axis=1)\n# Drop columns with any missing values (NaN / null)\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"C"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"3")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.dropna(thresh=2)\n# Drop raws with < 2 non-NaN values\n")),Object(b.b)("h2",{id:"fillna"},Object(b.b)("inlineCode",{parentName:"h2"},"fillna()")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.fillna(value='FILL VALUE')\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"1.0"),Object(b.b)("td",{parentName:"tr",align:null},"5.0"),Object(b.b)("td",{parentName:"tr",align:null},"1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"2.0"),Object(b.b)("td",{parentName:"tr",align:null},"FILL VALUE"),Object(b.b)("td",{parentName:"tr",align:null},"2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"FILL VALUE"),Object(b.b)("td",{parentName:"tr",align:null},"FILL VALUE"),Object(b.b)("td",{parentName:"tr",align:null},"3")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df['A'].fillna(value=df['A'].mean())\n# 0    1.0\n# 1    2.0\n# 2    1.5\n# Name: A, dtype: float64\n")),Object(b.b)("h1",{id:"groupby"},"Groupby"),Object(b.b)("p",null,"The groupby method allows you to group rows of data together and call aggregate functions"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"import pandas as pd\n# Create dataframe\ndata = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],\n       'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'],\n       'Sales':[200,120,340,124,243,350]}\ndf = pd.DataFrame(data)\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"Company"),Object(b.b)("th",{parentName:"tr",align:null},"Person"),Object(b.b)("th",{parentName:"tr",align:null},"Sales"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"GOOG"),Object(b.b)("td",{parentName:"tr",align:null},"Sam"),Object(b.b)("td",{parentName:"tr",align:null},"200")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"GOOG"),Object(b.b)("td",{parentName:"tr",align:null},"Charlie"),Object(b.b)("td",{parentName:"tr",align:null},"120")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"MSFT"),Object(b.b)("td",{parentName:"tr",align:null},"Amy"),Object(b.b)("td",{parentName:"tr",align:null},"340")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"MSFT"),Object(b.b)("td",{parentName:"tr",align:null},"Vanessa"),Object(b.b)("td",{parentName:"tr",align:null},"124")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"4"),Object(b.b)("td",{parentName:"tr",align:null},"FB"),Object(b.b)("td",{parentName:"tr",align:null},"Carl"),Object(b.b)("td",{parentName:"tr",align:null},"243")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"5"),Object(b.b)("td",{parentName:"tr",align:null},"FB"),Object(b.b)("td",{parentName:"tr",align:null},"Sarah"),Object(b.b)("td",{parentName:"tr",align:null},"350")))),Object(b.b)("p",null,"Using .groupby() method groups rows together based off a column name & creates a ",Object(b.b)("inlineCode",{parentName:"p"},"DataFramGroupBy")," object"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"by_comp = df.groupby('Company')\n# <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fc970f60ed0>\n")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"by_comp.mean()\n# df.groupby('Company').mean()\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Company"),Object(b.b)("th",{parentName:"tr",align:null},"Sales"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"FB"),Object(b.b)("td",{parentName:"tr",align:null},"296.5")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"GOOG"),Object(b.b)("td",{parentName:"tr",align:null},"160.0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"MSFT"),Object(b.b)("td",{parentName:"tr",align:null},"232.0")))),Object(b.b)("p",null,"Other aggregate methods"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"by_comp.std()\nby_comp.min()\nby_comp.max()\nby_comp.count()\nby_comp.describe()\nby_comp.describe().transpose()\n")),Object(b.b)("h1",{id:"merging-joining-and-concatenating"},"Merging, Joining, and Concatenating"),Object(b.b)("p",null,"There are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                    'B': ['B0', 'B1', 'B2', 'B3'],\n                    'C': ['C0', 'C1', 'C2', 'C3'],\n                    'D': ['D0', 'D1', 'D2', 'D3']},\n                    index=[0, 1, 2, 3])\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                    'B': ['B4', 'B5', 'B6', 'B7'],\n                    'C': ['C4', 'C5', 'C6', 'C7'],\n                    'D': ['D4', 'D5', 'D6', 'D7']},\n                    index=[4, 5, 6, 7])\ndf3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                    'B': ['B8', 'B9', 'B10', 'B11'],\n                    'C': ['C8', 'C9', 'C10', 'C11'],\n                    'D': ['D8', 'D9', 'D10', 'D11']},\n                    index=[8, 9, 10, 11])\n")),Object(b.b)("h2",{id:"concatenation"},"Concatenation"),Object(b.b)("p",null,"Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use ",Object(b.b)("inlineCode",{parentName:"p"},"pd.concat")," and pass in a list of DataFrames to concatenate together"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.concat([df1,df2,df3])\n# concat by column (A,B,C,D)\npd.concat([df1,df2,df3], axis=1)\n# concat by raw (index)\n")),Object(b.b)("h2",{id:"merging"},"Merging"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"merge")," function allows you to merge DataFrames together using a similar logic as merging SQL Tables together."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                       'A': ['A0', 'A1', 'A2', 'A3'],\n                       'B': ['B0', 'B1', 'B2', 'B3']})\n\nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                        'C': ['C0', 'C1', 'C2', 'C3'],\n                        'D': ['D0', 'D1', 'D2', 'D3']})\n")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.merge(left,right,how='inner',on='key')\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"key"),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"),Object(b.b)("th",{parentName:"tr",align:null},"D"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A0"),Object(b.b)("td",{parentName:"tr",align:null},"B0"),Object(b.b)("td",{parentName:"tr",align:null},"C0"),Object(b.b)("td",{parentName:"tr",align:null},"D0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"A1"),Object(b.b)("td",{parentName:"tr",align:null},"B1"),Object(b.b)("td",{parentName:"tr",align:null},"C1"),Object(b.b)("td",{parentName:"tr",align:null},"D1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"K2"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"C2"),Object(b.b)("td",{parentName:"tr",align:null},"D2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"K3"),Object(b.b)("td",{parentName:"tr",align:null},"A3"),Object(b.b)("td",{parentName:"tr",align:null},"B3"),Object(b.b)("td",{parentName:"tr",align:null},"C3"),Object(b.b)("td",{parentName:"tr",align:null},"D3")))),Object(b.b)("p",null,"More complex example:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                        'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3']})\n\nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                      'key2': ['K0', 'K0', 'K0', 'K0'],\n                         'C': ['C0', 'C1', 'C2', 'C3'],\n                         'D': ['D0', 'D1', 'D2', 'D3']})\n")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.merge(left, right, on=['key1', 'key2'])\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"key1"),Object(b.b)("th",{parentName:"tr",align:null},"key2"),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"),Object(b.b)("th",{parentName:"tr",align:null},"D"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A0"),Object(b.b)("td",{parentName:"tr",align:null},"B0"),Object(b.b)("td",{parentName:"tr",align:null},"C0"),Object(b.b)("td",{parentName:"tr",align:null},"D0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"C1"),Object(b.b)("td",{parentName:"tr",align:null},"D1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"C2"),Object(b.b)("td",{parentName:"tr",align:null},"D2")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.merge(left, right, how='outer', on=['key1', 'key2'])\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"key1"),Object(b.b)("th",{parentName:"tr",align:null},"key2"),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"),Object(b.b)("th",{parentName:"tr",align:null},"D"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A0"),Object(b.b)("td",{parentName:"tr",align:null},"B0"),Object(b.b)("td",{parentName:"tr",align:null},"C0"),Object(b.b)("td",{parentName:"tr",align:null},"D0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"NaN")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"C2"),Object(b.b)("td",{parentName:"tr",align:null},"D2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"A2"),Object(b.b)("td",{parentName:"tr",align:null},"B2"),Object(b.b)("td",{parentName:"tr",align:null},"C2"),Object(b.b)("td",{parentName:"tr",align:null},"D2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"4"),Object(b.b)("td",{parentName:"tr",align:null},"K2"),Object(b.b)("td",{parentName:"tr",align:null},"K1"),Object(b.b)("td",{parentName:"tr",align:null},"A3"),Object(b.b)("td",{parentName:"tr",align:null},"B3"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"NaN")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"5"),Object(b.b)("td",{parentName:"tr",align:null},"K2"),Object(b.b)("td",{parentName:"tr",align:null},"K0"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"NaN"),Object(b.b)("td",{parentName:"tr",align:null},"C3"),Object(b.b)("td",{parentName:"tr",align:null},"D3")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.merge(left, right, how='right', on=['key1', 'key2'])\npd.merge(left, right, how='left', on=['key1', 'key2'])\n\n## Needs SQL knowledge\n")),Object(b.b)("h2",{id:"joining"},"Joining"),Object(b.b)("p",null,"Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame."),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"left = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\n                     'B': ['B0', 'B1', 'B2']},\n                      index=['K0', 'K1', 'K2'])\n\nright = pd.DataFrame({'C': ['C0', 'C2', 'C3'],\n                      'D': ['D0', 'D2', 'D3']},\n                      index=['K0', 'K2', 'K3'])\n")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"left.join(right)\nleft.join(right, how='outer')\n")),Object(b.b)("h1",{id:"operations"},"Operations"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"import pandas as pd\ndf = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"col1"),Object(b.b)("th",{parentName:"tr",align:null},"col2"),Object(b.b)("th",{parentName:"tr",align:null},"col3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"abc")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"555"),Object(b.b)("td",{parentName:"tr",align:null},"def")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"666"),Object(b.b)("td",{parentName:"tr",align:null},"ghi")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"4"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"xyz")))),Object(b.b)("h2",{id:"info-on-unique-values"},"Info on Unique Values"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df['col2'].unique()\n# array([444, 555, 666])\n\ndf['col2'].nunique()\n# 3\n\ndf['col2'].value_counts()\n# 444    2\n# 555    1\n# 666    1\n# Name: col2, dtype: int64\n")),Object(b.b)("h2",{id:"applying-functions"},"Applying Functions"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"def times2(x):\n    return x*2\n\ndf['col1'].apply(times2)\n# 0    2\n# 1    4\n# 2    6\n# 3    8\n# Name: col1, dtype: int64\n\ndf['col3'].apply(len)\n# 0    3\n# 1    3\n# 2    3\n# 3    3\n# Name: col3, dtype: int64\n\ndf['col1'].sum()\n# 10\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Permanently Removing a Column")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"del df['col1']\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"col2"),Object(b.b)("th",{parentName:"tr",align:null},"col3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"abc")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"555"),Object(b.b)("td",{parentName:"tr",align:null},"def")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"666"),Object(b.b)("td",{parentName:"tr",align:null},"ghi")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"xyz")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Get column and index names")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.columns\ndf.index\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Sorting and Ordering a DataFrame")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.sort_values(by='col2') #inplace=False by default\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"col2"),Object(b.b)("th",{parentName:"tr",align:null},"col3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"abc")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"444"),Object(b.b)("td",{parentName:"tr",align:null},"xyz")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"555"),Object(b.b)("td",{parentName:"tr",align:null},"def")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"666"),Object(b.b)("td",{parentName:"tr",align:null},"ghi")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Find Null Values or Check for Null Values")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.isnull()\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"col2"),Object(b.b)("th",{parentName:"tr",align:null},"col3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"False"),Object(b.b)("td",{parentName:"tr",align:null},"False")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"False"),Object(b.b)("td",{parentName:"tr",align:null},"False")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"False"),Object(b.b)("td",{parentName:"tr",align:null},"False")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"False"),Object(b.b)("td",{parentName:"tr",align:null},"False")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"data = {'A':['foo','foo','foo','bar','bar','bar'],\n     'B':['one','one','two','two','one','one'],\n       'C':['x','y','x','y','x','y'],\n       'D':[1,3,2,5,4,1]}\n\ndf = pd.DataFrame(data)\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null}),Object(b.b)("th",{parentName:"tr",align:null},"A"),Object(b.b)("th",{parentName:"tr",align:null},"B"),Object(b.b)("th",{parentName:"tr",align:null},"C"),Object(b.b)("th",{parentName:"tr",align:null},"D"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"0"),Object(b.b)("td",{parentName:"tr",align:null},"foo"),Object(b.b)("td",{parentName:"tr",align:null},"one"),Object(b.b)("td",{parentName:"tr",align:null},"x"),Object(b.b)("td",{parentName:"tr",align:null},"1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"1"),Object(b.b)("td",{parentName:"tr",align:null},"foo"),Object(b.b)("td",{parentName:"tr",align:null},"one"),Object(b.b)("td",{parentName:"tr",align:null},"y"),Object(b.b)("td",{parentName:"tr",align:null},"3")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"2"),Object(b.b)("td",{parentName:"tr",align:null},"foo"),Object(b.b)("td",{parentName:"tr",align:null},"two"),Object(b.b)("td",{parentName:"tr",align:null},"x"),Object(b.b)("td",{parentName:"tr",align:null},"2")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"3"),Object(b.b)("td",{parentName:"tr",align:null},"bar"),Object(b.b)("td",{parentName:"tr",align:null},"two"),Object(b.b)("td",{parentName:"tr",align:null},"y"),Object(b.b)("td",{parentName:"tr",align:null},"5")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"4"),Object(b.b)("td",{parentName:"tr",align:null},"bar"),Object(b.b)("td",{parentName:"tr",align:null},"one"),Object(b.b)("td",{parentName:"tr",align:null},"x"),Object(b.b)("td",{parentName:"tr",align:null},"4")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"5"),Object(b.b)("td",{parentName:"tr",align:null},"bar"),Object(b.b)("td",{parentName:"tr",align:null},"one"),Object(b.b)("td",{parentName:"tr",align:null},"y"),Object(b.b)("td",{parentName:"tr",align:null},"1")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.pivot_table(values='D',index=['A', 'B'],columns=['C'])\n")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"    C   x   y\nA   B\n---------------\nbar one 4.0 1.0\ntwo NaN 5.0\nfoo one 1.0 3.0\ntwo 2.0 NaN\n")),Object(b.b)("h1",{id:"data-input-and-output"},"Data Input and Output"),Object(b.b)("h2",{id:"csv"},"CSV"),Object(b.b)("h3",{id:"csv-input"},"CSV Input"),Object(b.b)("p",null,"Read csv file"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"df = pd.read_csv('example')\n")),Object(b.b)("p",null,"Write to csv file"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"df.to_csv('example',index=False)\n")),Object(b.b)("h2",{id:"excel"},"Excel"),Object(b.b)("h3",{id:"excel-input"},"Excel Input"),Object(b.b)("p",null,"Read Excel File"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"pd.read_excel('Excel_Sample.xlsx',sheet_name='Sheet1')\n")),Object(b.b)("h3",{id:"excel-output"},"Excel Output"),Object(b.b)("p",null,"Write to Excel File"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df.to_excel('Excel_Sample.xlsx',sheet_name='Sheet1')\n")),Object(b.b)("h2",{id:"html"},"HTML"),Object(b.b)("p",null,"You may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal/command prompt run:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"conda install lxml\nconda install html5lib\nconda install BeautifulSoup4\n")),Object(b.b)("p",null,"Then restart Jupyter Notebook.\n(or use pip install if you aren't using the Anaconda Distribution)"),Object(b.b)("p",null,"Pandas can read table tabs off of html. For example:"),Object(b.b)("h3",{id:"html-input"},"HTML Input"),Object(b.b)("p",null,"Pandas read_html function will read tables off of a webpage and return a list of DataFrame objects:"),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-py"},"df = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')\ndf[0]\n")))}i.isMDXComponent=!0}}]);